import { assert } from 'chai';
import { FragmentCollection, DOT } from '../types';
const jsonContent = '{"keys":[{"key":"hashedurl","value":"8197029859537599926"}],"entity":{"_created":"2018-08-23T20:35:45.699540717Z","_modified":"2018-10-17T19:43:58.73961012Z","aspects":["other"],"created":"2018-08-23T20:35:43Z","description":"Freeze: Home","enriched":{"diffbot":1535059732,"meta":1535056545},"fetched":"2018-08-23T20:35:45Z","hashedurl":["8197029859537599926"],"httpfailures":"10","httpstatus":"404","httpstatuses":["200","404"],"language":"en","meta":["viewport=width=device-width, initial-scale=1.0"],"source":"diffbot","stream":"default","type":"web","updated":"2018-10-17T19:43:58Z","url":"lytics-training-arke.appspot.com","version":"4","wordct":"38"},"fragments":[{"key":[{"key":"hashedurl","value":"8197029859537599926"}],"neighbors":null,"fragment":{"_created":"2018-08-23T20:35:45.699540717Z","_modified":"2018-10-17T19:43:58.73961012Z","aspects":["other"],"created":"2018-08-23T20:35:43Z","description":"Freeze: Home","enriched":{"diffbot":1535059732,"meta":1535056545},"fetched":"2018-08-23T20:35:45Z","hashedurl":["8197029859537599926"],"httpfailures":"10","httpstatus":"404","httpstatuses":["200","404"],"language":"en","meta":["viewport=width=device-width, initial-scale=1.0"],"source":"diffbot","stream":"default","type":"web","updated":"2018-10-17T19:43:58Z","url":"lytics-training-arke.appspot.com","version":"4","wordct":"38"},"meta":{"conflict":false}}]}';
const jsonUser = '{"keys":[{"key":"email","value":"adam.conn@gmail.com"},{"key":"_","value":"13013841141692094059"},{"key":"mc_euid","value":"5718cb9c0b"}],"entity":{"_created":"2018-10-30T15:57:34Z","_modified":"2018-10-30T16:02:19.068517336Z","channels":["email"],"email":"adam.conn@gmail.com","emaildomain":"gmail.com","last_active_ts":"2018-10-30T16:01:22Z","mc_action":"open","mc_actionct":{"open":"2"},"mc_campaignids":["280bc98245"],"mc_euid":"5718cb9c0b","mc_first_name":"Adam","mc_firstopen_ts":"2018-10-30T16:01:17Z","mc_hourlyopen":{"16":"2"},"mc_last_name":"Conn","mc_lastopen_ts":"2018-10-30T16:01:22Z","mc_latitude":"0","mc_leids":["fe0bb249ead27b8541f9ec7e79f46b1d"],"mc_listids":["7a587bbd72"],"mc_longitude":"0","mc_openct":"2","mc_rating":"2","score_frequency":"100","score_intensity":"98","score_momentum":"99","score_propensity":"0","score_quantity":"100","score_recency":"99","total_opens_by_campaign":{"280bc98245":"2"}},"fragments":[{"key":[{"key":"email","value":"adam.conn@gmail.com"}],"neighbors":[{"key":"_","value":"13013841141692094059"}],"fragment":{"_created":"2018-10-30T16:01:17Z","_modified":"2018-10-30T16:01:22Z","channels":["email"],"email":"adam.conn@gmail.com","emaildomain":"gmail.com","last_active_ts":"2018-10-30T16:01:22Z","mc_action":"open","mc_actionct":{"open":"2"},"mc_campaignids":["280bc98245"],"mc_firstopen_ts":"2018-10-30T16:01:17Z","mc_hourlyopen":{"16":"2"},"mc_lastopen_ts":"2018-10-30T16:01:22Z","mc_openct":"2","total_opens_by_campaign":{"280bc98245":"2"}},"meta":{"streams":["mailchimp_activity"],"conflict":false}},{"key":[{"key":"mc_euid","value":"5718cb9c0b"},{"key":"email","value":"adam.conn@gmail.com"}],"neighbors":[{"key":"mc_euid","value":"5718cb9c0b"},{"key":"email","value":"adam.conn@gmail.com"}],"fragment":{"_created":"2018-10-30T15:57:34Z","_modified":"2018-10-30T15:57:34Z","email":"adam.conn@gmail.com","emaildomain":"gmail.com","mc_euid":"5718cb9c0b","mc_first_name":"Adam","mc_last_name":"Conn","mc_latitude":"0","mc_leids":["fe0bb249ead27b8541f9ec7e79f46b1d"],"mc_listids":["7a587bbd72"],"mc_longitude":"0","mc_rating":"2"},"meta":{"streams":["mailchimp_subscribers"],"conflict":false}},{"key":[{"key":"mc_euid","value":"5718cb9c0b"}],"neighbors":[{"key":"_","value":"13013841141692094059"}],"fragment":null,"meta":{"conflict":false}}]}';

describe('DOT', function () {
    it('should return a string when user fragments are provided', async function () {
        const collection = JSON.parse(jsonUser) as FragmentCollection;
        const str = DOT.fragmentsToDot(collection.fragments);
        assert.isDefined(str);
    });
    it('should return a string when content fragments are provided', async function () {
        const collection = JSON.parse(jsonContent) as FragmentCollection;
        const str = DOT.fragmentsToDot(collection.fragments);
        assert.isDefined(str);
    });
});
